<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <meta http-equiv="Content-Type"
    content="text/html; charset=utf-8" />
    <title>Gtk2Hs Tutorial: The Layout Container</title>
    <link href="default.css" type="text/css" rel="stylesheet" />
  </head>
  <body>
    <div id="header">
      <h1>Gtk2Hs Tutorial</h1>
      <span class="nav-previous">
        <a href="chap6-2.xhtml">Previous</a>
      </span>
      <span class="nav-home">
        <a href="index.xhtml">Home</a>
      </span>
      <span class="nav-next">
        <a href="chap6-4.xhtml">Next</a>
      </span>
    </div>
    <h2>6.3 The Layout Container</h2>
    <p>Until now packing of widgets has been done either through
    sequencing in horizontal or vertical boxes, or in a table. You
    can, however, also place widgets in any position you like,
    using a 
    <code>Fixed</code> or a 
    <code>Layout</code> widget. Use of the 
    <code>Fixed</code> container is not recommended, because it does
    not resize well.</p>
    <p>The Layout container is similar to the Fixed container
    except that it implements an infinite (where infinity is less
    than 2^32) scrolling area. The X window system has a limitation
    where windows can be at most 32767 pixels wide or tall. The
    Layout container gets around this by doing some
    exotic stuff using window and bit gravities, so that you can
    have smooth scrolling even when you have many child widgets in
    your scrolling area. Since it is used in a scrolled window, the
    disadvantages of the 
    <code>Fixed</code> widget do not apply.</p>
    <p>A Layout container is created using:</p>
    <pre class="codebox">layoutNew :: Maybe Adjustment -&gt; Maybe Adjustment -&gt; IO Layout
</pre>
    <p>As you can see, you can optionally specify the Adjustment
    objects that the Layout widget will use for its scrolling.</p>
    <p>You can add and move widgets in the Layout container using
    the following two functions:</p>
    <pre class="codebox">layoutPut :: (LayoutClass self, WidgetClass childWidget)
=&gt; self -&gt; childWidget -&gt; Int -&gt; Int -&gt; IO ()
layoutMove :: (LayoutClass self, WidgetClass childWidget)
=&gt; self -&gt; childWidget -&gt; Int -&gt; Int -&gt; IO ()   
</pre>
    <p>The first argument is the x position, the second the y
    position. The top left is (0,0), x grows from left to right,
    and y from top to bottom.</p>
    <p>The size of the 
    <code>Layout</code> container can be set using the next
    function:</p>
    <pre class="codebox">layoutSetSize :: LayoutClass self =&gt; self  -&gt; Int -&gt; Int -&gt; IO ()
</pre>
    <p>The first argument is the width of the entire scrollable
    area, the second the height.</p>
    <p>In the example we place a list of labels, each with an upper
    case letter of the alphabet, in a circle around a chosen
    centre. The labels are positioned perpendicular to the radius
    using the Gtk2Hs function:</p>
    <pre class="codebox">labelSetAngle :: labelClass self =&gt; self -&gt; Double -&gt; IO ()
</pre>
    <p>The angle is in degrees, measured counterclockwise.</p>
    <img src="Images/GtkChap6-3.png" alt="Alphabet"
    id="imgGtkChap6-3" />
    <p>The layout widget is placed into a scrolled window with 
    <code>containerAdd</code> because it is scrollable, and so does
    not need a view port, as in Chapter 6.1. The labels are
    positioned using angular coordinates, which are then
    transformed into Cartesian coordinates with the Prelude 
    <code>sin</code> and 
    <code>cos</code> functions. These take radians as their
    arguments (between 0 and (2 * pi)). Width and Height in the
    example are parametrized, as is the list to be displayed.
    Furthermore, in 
    <code>main</code> the corners of the 
    <code>Layout</code> are marked, so you can easily experiment with its
    size, if you want. Note that the actual marker has been replaced with '+'  here, because
    the validator complained.</p>
    <pre class="codebox">import Graphics.UI.Gtk

main :: IO ()
main = do
     initGUI
     window &lt;- windowNew
     set window [windowTitle := "Alphabet" , windowDefaultWidth := 350,
             windowDefaultHeight := 350 , containerBorderWidth := 10]
     sw &lt;- scrolledWindowNew Nothing Nothing
     set sw [scrolledWindowPlacement := CornerBottomRight, 
             scrolledWindowShadowType := ShadowEtchedIn,
             scrolledWindowHscrollbarPolicy := PolicyAutomatic,
             scrolledWindowVscrollbarPolicy := PolicyAutomatic ]
     containerAdd window sw

     layt &lt;- layoutNew Nothing Nothing
     layoutSetSize layt myLayoutWidth myLayoutHeight
     widgetModifyBg layt StateNormal (Color 65535 65535 65535)
     containerAdd sw layt     
 
     upleft  &lt;- labelNew (Just "+(0,0)")
     layoutPut layt upleft 0 0
     upright &lt;- labelNew (Just ("+(" ++ (show (myLayoutWidth - 50)) ++",0)"))
     layoutPut layt upright (myLayoutWidth -50)  0
     dwnright &lt;- labelNew (Just ("+(0," ++ (show (myLayoutHeight -20)) ++ ")"))
     layoutPut layt dwnright 0 (myLayoutHeight -20)
     dwnleft &lt;- labelNew (Just ("+(" ++ (show(myLayoutWidth -70)) ++ "," ++
                                  (show (myLayoutHeight -20)) ++ ")"))
     layoutPut layt dwnleft (myLayoutWidth -70) (myLayoutHeight - 20)
     
     labels &lt;- sequence $ map (labelNew . Just) txtls
     sequence_ $ map (\x -&gt; widgetModifyFg x StateNormal (Color 0 0 45000)) labels
     
     let wnums = zip labels [0..]
     sequence_ $ map (myLayoutPut layt) wnums     

     widgetShowAll window
     onDestroy window mainQuit
     mainGUI

-- parameters
myLayoutWidth :: Int
myLayoutWidth = 800

myLayoutHeight :: Int
myLayoutHeight = 800

txtls :: [String]
txtls = map (\x -&gt; x:[]) ['A'..'Z']
-- end parameters

step :: Double
step = (2 * pi)/(fromIntegral (length txtls))

ox :: Int
ox =  myLayoutWidth `div` 2

oy :: Int
oy = myLayoutHeight `div` 2

radius :: Double
radius = 0.25 * (fromIntegral ox)

angle :: Int -&gt; Double
angle num = 1.5 * pi + (fromIntegral num) * step

num2x :: Int -&gt; Int
num2x n = ox + relx where 
              relx = round $ radius * (cos (angle n))

num2y :: Int -&gt; Int
num2y n = oy + rely where
              rely = round $ radius * (sin (angle n))

myLayoutPut :: Layout -&gt; (Label, Int) -&gt; IO ()
myLayoutPut lt (lb, n) = do 
         layoutPut lt lb (num2x n) (num2y n) 
         labelSetAngle lb (letterAngle n)

letterAngle :: Int -&gt; Double
letterAngle n = (270 - degree) where
                    degree = (angle n) * (180.0 /pi)
</pre>
    <div id="footer">
      <span class="nav-previous">
      <a href="chap6-1.xhtml">Previous</a>
      <br />6.2 Event Boxes and Button Boxes</span>
      <span class="nav-home">
        <a href="index.xhtml">Home</a>
      </span>
      <span class="nav-next">
      <a href="chap6-4.xhtml">Next</a>
      <br />6.4</span>
    </div>
  </body>
</html>
