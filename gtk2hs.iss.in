; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

[Setup]
AppName=Gtk2Hs
AppVerName=Gtk2Hs @VERSION@
AppVersion=@VERSION@
DefaultDirName={pf}\Gtk2Hs

AppPublisher=Gtk2Hs
AppPublisherURL=http://haskell.org/gtk2hs/
AppSupportURL=http://haskell.org/gtk2hs/

OutputBaseFilename=gtk2hs-@VERSION@
Compression=lzma
SolidCompression=yes

[Files]
Source: "gtk2hs-@VERSION@\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs; AfterInstall: AfterPkgInstall;

[Run]
Filename: "{code:ghcpkg}"; Parameters: "--update-package --input-file={app}\glib.pkg";  StatusMsg: "Registering glib package...";  Flags: runhidden
Filename: "{code:ghcpkg}"; Parameters: "--update-package --input-file={app}\gtk.pkg";   StatusMsg: "Registering gtk package...";   Flags: runhidden
Filename: "{code:ghcpkg}"; Parameters: "--update-package --input-file={app}\glade.pkg"; StatusMsg: "Registering glade package..."; Flags: runhidden
Filename: "{code:ghcpkg}"; Parameters: "--update-package --input-file={app}\mogul.pkg"; StatusMsg: "Registering mogul package..."; Flags: runhidden

[UninstallRun]
Filename: "{code:ghcpkg}"; Parameters: "--remove-package=mogul"; RunOnceId: "mogul"; Flags: runhidden
Filename: "{code:ghcpkg}"; Parameters: "--remove-package=glade"; RunOnceId: "glade"; Flags: runhidden
Filename: "{code:ghcpkg}"; Parameters: "--remove-package=gtk";   RunOnceId: "gtk";   Flags: runhidden
Filename: "{code:ghcpkg}"; Parameters: "--remove-package=glib";  RunOnceId: "glib";  Flags: runhidden

[Code]
var
  GhcInstallDir: String;
  GtkInstallDir: String;
  
function ghcpkg(Param: String): String;
begin
  Result := AddBackslash(GhcInstallDir) + 'bin\ghc-pkg.exe';
end;

function gtkdir(Param: String): String;
begin
  Result := GtkInstallDir;
end;

{ exec a program and return its output }
function ExecOutput(const Filename, Params: String): String;
var
  TmpFile: String;
  ResultCode: Integer;
begin
  Result := '';
  TmpFile := GenerateUniqueName(ExpandConstant('{tmp}'), 'tmp');
  if Exec(ExpandConstant('{cmd}'), '/C ' + Filename + ' ' + Params + ' > ' + TmpFile,
     '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
    if ResultCode = 0 then
      if LoadStringFromFile(TmpFile, Result) then
      begin
        Result := Trim(Result);
        Log('ExecOutput: running ' + Filename + ' succeded with output: ' + Result);
      end
      else
        Log('ExecOutput: running ' + Filename + ' succeded, but the temp file was not created')
    else
      Log('ExecOutput: running ' + Filename + ' failed, code: ' + IntToStr(ResultCode))
  else
    { That's really odd, we should always be able to exec the command interpreter! }
    Log('ExecOutput: cannot exec command interpreter, code: ' + IntToStr(ResultCode) + ', message: ' + SysErrorMessage(ResultCode));
end;

function CheckGHCVersion(const Path: String):String;
begin
  Result := ExecOutput(AddBackslash(Path) + 'bin\ghc.exe', '--numeric-version');
end;

function DetectValidGhcInstallation(): Boolean;
var
  HaveSomeGHCInstalled: Boolean;
  GHCVersion: String;

begin
  Result := False;

  { first check for ghc on the path, then look in the registry }
  
  begin
    GhcInstallDir := ExecOutput('ghc.exe', '--print-libdir');
    if not (GhcInstallDir = '') then
    begin
      StringChange(GhcInstallDir, '/', '\');
      Log('DetectValidGhcInstallation: found ghc on %PATH% with libdir: ' + GhcInstallDir);
      HaveSomeGHCInstalled := True;
      GHCVersion := CheckGHCVersion(GhcInstallDir);
      if GHCVersion = '6.2.2' then
        Result := True;
    end;
  end;

  if (Result = False) and RegKeyExists(HKEY_CURRENT_USER, 'Software\Haskell\GHC') then
  begin
    Log('DetectValidGhcInstallation: found HKCU\Software\Haskell\GHC');
    HaveSomeGHCInstalled := True;
    RegQueryStringValue(HKEY_CURRENT_USER, 'Software\Haskell\GHC\ghc-6.2.2', 'InstallDir', GhcInstallDir);
    GHCVersion := CheckGHCVersion(GhcInstallDir);
    if GHCVersion = '6.2.2' then
      Result := True;
  end;

  if (Result = False) and RegKeyExists(HKEY_LOCAL_MACHINE, 'SOFTWARE\Haskell\GHC') then
  begin
    Log('DetectValidGhcInstallation: found HKLM\SOFTWARE\Haskell\GHC');
    HaveSomeGHCInstalled := True;
    RegQueryStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Haskell\GHC\ghc-6.2.2', 'InstallDir', GhcInstallDir);
    GHCVersion := CheckGHCVersion(GhcInstallDir);
    if GHCVersion = '6.2.2' then
      Result := True;
  end;
  
  if Result then
    Log('DetectValidGhcInstallation: correct version of ghc found at: ' + GhcInstallDir)
  else if HaveSomeGHCInstalled and (not GHCVersion = '') then
  begin
    Log('DetectValidGhcInstallation: incorrect ghc version installed: ' + GHCVersion);
    SuppressibleMsgBox('This version of Gtk2Hs requires GHC version 6.2.2.', mbError, MB_OK, IDOK);
  end
  else if HaveSomeGHCInstalled and (not GhcInstallDir = '') then
  begin
    Log('DetectValidGhcInstallation: some non-working version of ghc appears to be installed at: ' + GhcInstallDir);
    SuppressibleMsgBox('GHC does not appear to be installed correctly, try reinstalling GHC version 6.2.2.', mbError, MB_OK, IDOK);
  end
  else if HaveSomeGHCInstalled then
  begin
    Log('DetectValidGhcInstallation: corrupted ghc installation detected, probably messed up registry keys');
    SuppressibleMsgBox('GHC does not appear to be installed (or the installation is corrupted), please install GHC version 6.2.2.', mbError, MB_OK, IDOK);
  end
  else
  begin
    Log('DetectValidGhcInstallation: no installation of ghc detected');
    SuppressibleMsgBox('Gtk2Hs requires GHC to be installed first, please install GHC version 6.2.2.', mbError, MB_OK, IDOK);
  end;

end;

function CheckGtkVersionIsOk(const Path: String; var Version: String):Boolean;
begin
  GetVersionNumbersString(AddBackslash(Path) + 'bin\libgtk-win32-2.0-0.dll', Version);
  Result := CompareStr(Version, '2.6.0') >= 0;
  
  { fixme, do a better parsing and comparison of the Gtk version }
end;

type GtkStatus =
  (GtkNotDetected
  ,GtkAppearsToHaveBeenInstalledEver
  ,GtkAppearsToBeInstalled
  ,GtkVersionIsOk
  ,GtkDevelIsInstalled
  ,InstalledOk);

function DetectValidGtkInstallation(): Boolean;
var
  GtkVersion, GtkVendorVersion: String;
  GtkStatus : GtkStatus;
  RegHive: Integer;

  InstallMessage: String;
begin
  GtkStatus := GtkNotDetected;
  Result := False;

  if RegKeyExists(HKEY_CURRENT_USER, 'Software\GTK\2.0') then
  begin
    GtkStatus := GtkAppearsToHaveBeenInstalledEver;
    RegHive := HKEY_CURRENT_USER;
  end
  else if RegKeyExists(HKEY_LOCAL_MACHINE, 'Software\GTK\2.0') then
  begin
    GtkStatus := GtkAppearsToHaveBeenInstalledEver;
    RegHive := HKEY_LOCAL_MACHINE;
  end

  if (GtkStatus = GtkAppearsToHaveBeenInstalledEver)
    and RegQueryStringValue(GtkRegHive, 'Software\GTK\2.0', 'Path', GtkInstallDir)
    and DirExists(GtkInstallDir) then
    GtkStatus := GtkAppearsToBeInstalled;

  if (GtkStatus = GtkAppearsToBeInstalled)
    and CheckGtkVersionIsOk(GtkInstallDir, GtkVersion) then
    GtkStatus := GtkVersionIsOk;

  if (GtkStatus = GtkVersionIsOk)
    and FileExists(AddBackslash(GtkInstallDir) + 'lib\libgtk-win32-2.0.dll.a')
    and FileExists(AddBackslash(GtkInstallDir) + 'include\gtk-2.0\gtk\gtk.h') then
    GtkStatus := GtkDevelIsInstalled;

  if (GtkStatus = GtkDevelIsInstalled)
    and (Pos(AddBackslash(GtkInstallDir) + 'bin', GetEnv('PATH')) <> 0) then
    GtkStatus := InstalledOk;

  case GtkStatus of
    GtkNotDetected:
      InstallMessage := 'Gtk2Hs requires Gtk+ to be installed first.' #13#10 #13#10
                        'Please install the Gtk+ Development Environment, which is available from' #13#10
                        'http://gladewin32.sourceforge.net/' #13#10 #13#10
                        'You need any "devel" version between 2.6.0 and 2.6.6 (not 2.6.7+)';
    GtkAppearsToHaveBeenInstalledEver:
      InstallMessage := 'The Gtk+ installation appears to be missing or currupted' #13#10 #13#10
                        'Please reinstall the Gtk+ Development Environment, which is available from' #13#10
                        'http://gladewin32.sourceforge.net/' #13#10 #13#10
                        'You need any "devel" version between 2.6.0 and 2.6.6 (not 2.6.7+)';
    GtkAppearsToBeInstalled:
      InstallMessage := 'The version of Gtk+ installed is too old' #13#10 #13#10
                        'Please install the Gtk+ Development Environment, which is available from' #13#10
                        'http://gladewin32.sourceforge.net/' #13#10 #13#10
                        'You need any "devel" version between 2.6.0 and 2.6.6 (not 2.6.7+)';
    GtkVersionIsOk:
    begin
      RegQueryStringValue(RegHive, 'Software\GTK\2.0', 'VendorVersion', GtkVendorVersion);
      if Pos('devel', GtkVendorVersion) = 0 then
      InstallMessage := 'Gtk2Hs requires the "devel" version of Gtk+ rather than the "runtime" version.' #13#10 #13#10
                        'Please install the Gtk+ Development Environment, which is available from' #13#10
                        'http://gladewin32.sourceforge.net/' #13#10 #13#10
                        'You need any "devel" version between 2.6.0 and 2.6.6 (not 2.6.7+)'
      else
      InstallMessage := 'Gtk2Hs requires the Gtk+ development headers and libraries to be installed.' #13#10 #13#10
                        'Please reinstall Gtk+ and make sure the "Devel headers/libraries" option is selected'
    end;
    GtkDevelIsInstalled:
      InstallMessage := 'The Gtk+ libraries are not on the Windows search path' #13#10
                        '(which would cause all Gtk2Hs programs not to work!).' #13#10 #13#10
                        'Please reinstall Gtk+ and make sure the "Register Environment variables" option is selected';
    InstalledOk:
      InstallMessage := 'Gtk seems to be installed correctly';
  end;
  
  Log(InstallMessage);
  
  { fixme: check about the 2.6.7 problem and ban that version from being used }
  
  if GtkStatus = InstalledOk then
    Result := True
  else
    SuppressibleMsgBox(InstallMessage, mbError, MB_OK, IDOK);
end;

function NextButtonClick(CurPageID: Integer): Boolean;
begin
  if CurPageID = wpWelcome then
    Result := DetectValidGhcInstallation() and DetectValidGtkInstallation()
  else
    Result := True;
end;

procedure PackageFileVarSubstitute(const PackageFile: String);
var
  PackageFileContent: String;
  PackageLibDir: String;
  GtkBaseDir: String;
begin
  PackageLibDir := ExpandConstant('{app}');
  StringChange(PackageLibDir, '\', '/');
  
  GtkBaseDir := GtkInstallDir;
  StringChange(GtkBaseDir, '\', '/');

  LoadStringFromFile(PackageFile, PackageFileContent);

  StringChange(PackageFileContent, '${pkglibdir}', PackageLibDir);
  StringChange(PackageFileContent, '${GTK_BASEPATH}', GtkBaseDir);
  
  SaveStringToFile(PackageFile, PackageFileContent, False);
  Log('Expanding variables in ' + PackageFile);
end;

procedure AfterPkgInstall;
begin
  if (ExtractFileExt(CurrentFileName) = '.pkg')
  or (ExtractFileExt(CurrentFileName) = '.cabal') then
    PackageFileVarSubstitute(ExpandConstant(CurrentFileName));
end;

// Detect when the ready info page gets displayed
function UpdateReadyMemo(Space, NewLine, MemoUserInfoInfo, MemoDirInfo,
                         MemoTypeInfo, MemoComponentsInfo, MemoGroupInfo,
                         MemoTasksInfo: String): String;
begin
		Result := MemoDirInfo + NewLine
		        + NewLine
		        +	'Using the version of GHC installed at:' + NewLine
		        + Space + GhcInstallDir + NewLine
		        + NewLine
		        + 'Using the version of GTK+ installed at:' + NewLine
		        + Space + GtkInstallDir;
end;

