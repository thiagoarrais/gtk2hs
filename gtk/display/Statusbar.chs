-- -*-haskell-*-
--  GIMP Toolkit (GTK) Widget StatusBar
--
--  Author : Axel Simon
--          
--  Created: 23 May 2001
--
--  Version $Revision: 1.4 $ from $Date: 2004/05/23 15:50:26 $
--
--  Copyright (c) 1999..2002 Axel Simon
--
--  This file is free software; you can redistribute it and/or modify
--  it under the terms of the GNU General Public License as published by
--  the Free Software Foundation; either version 2 of the License, or
--  (at your option) any later version.
--
--  This file is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--  GNU General Public License for more details.
--
-- |
--
-- Report messages of minor importance to the user.
--
-- * A Statusbar is usually placed along the bottom of an application's main
--   Window. It may provide a regular commentary of the application's status 
--   (as is usually the case in a web browser, for example), or may be used to
--   simply output a message when the status changes, (when an upload is 
--   complete in an FTP client, for example).
--
-- * Status bars in Gtk+ maintain a stack of messages. The message at the top
--   of the each bar's stack is the one that will currently be displayed.
--   Any messages added to a statusbar's stack must specify a ContextId that
--   is used to uniquely identify the source of a message. This ContextId can
--   be generated by statusbarGetContextId, given a message and the statusbar
--   that it will be added to. Note that messages are stored in a stack, and
--   when choosing which message to display, the stack structure is adhered
--   to, regardless of the context identifier of a message.
--   Messages are added to the bar's stack with statusbarPush. The message at
--   the top of the stack can be removed using statusbarPop. A message can be
--   removed from anywhere in the stack if it's MessageId was recorded at the
--   time it was added. This is done using statusbarRemove.
--

module Statusbar(
  Statusbar,
  StatusbarClass,
  castToStatusbar,
  statusbarNew,
  statusbarGetContextId,
  statusbarPush,
  statusbarPop,
  statusbarRemove,
  statusbarSetHasResizeGrip,
  statusbarGetHasResizeGrip,
  onTextPopped,
  afterTextPopped,
  onTextPushed,
  afterTextPushed
  ) where

import Monad	(liftM)
import FFI

import Object	(makeNewObject)
{#import Hierarchy#}
{#import Signal#}

{# context lib="gtk" prefix="gtk" #}

-- methods

-- | Create a new Statusbar.
--
statusbarNew :: IO Statusbar
statusbarNew  = makeNewObject mkStatusbar $ 
  liftM castPtr {#call unsafe statusbar_new#}

type ContextId = {#type guint#}

-- | Given a context description, this function
-- returns a ContextId. This id can be used to later remove entries form the
-- Statusbar.
--
statusbarGetContextId :: StatusbarClass sb => sb -> String -> IO ContextId
statusbarGetContextId sb description = withUTFString description $
  {#call unsafe statusbar_get_context_id#} (toStatusbar sb)


type MessageId = {#type guint#}

-- | Push a new message on the Statusbar stack. It will
-- be displayed as long as it is on top of the stack.
--
statusbarPush :: StatusbarClass sb => sb -> ContextId -> String -> IO MessageId
statusbarPush sb context msg = withUTFString msg $ {#call statusbar_push#}
  (toStatusbar sb) context

-- | Pops the topmost message that has the correct
-- context.
--
statusbarPop :: StatusbarClass sb => sb -> ContextId -> IO ()
statusbarPop sb context = {#call statusbar_pop#} (toStatusbar sb) context

-- | Remove an entry within the stack.
--
statusbarRemove :: StatusbarClass sb => sb -> ContextId -> MessageId -> IO ()
statusbarRemove sb context message = {#call statusbar_remove#} (toStatusbar sb)
  context message

-- | Toggle the displaying of a resize grip.
--
statusbarSetHasResizeGrip :: StatusbarClass sb => sb -> Bool -> IO ()
statusbarSetHasResizeGrip sb set = {#call statusbar_set_has_resize_grip#}
  (toStatusbar sb) (fromBool set)

-- | Query the displaying of the resize grip.
--
statusbarGetHasResizeGrip :: StatusbarClass sb => sb -> IO Bool
statusbarGetHasResizeGrip sb = liftM toBool $
  {#call unsafe statusbar_get_has_resize_grip#} (toStatusbar sb)

-- signals

-- | Called if a message is removed.
--
onTextPopped, afterTextPopped :: StatusbarClass sb => sb ->
                                 (ContextId -> String -> IO ()) ->
                                 IO (ConnectId sb)
onTextPopped = connect_WORD_STRING__NONE "text-popped" False
afterTextPopped = connect_WORD_STRING__NONE "text-popped" True

-- | Called if a message is pushed on top of the
-- stack.
--
onTextPushed, afterTextPushed :: StatusbarClass sb => sb ->
                                 (ContextId -> String -> IO ()) ->
                                 IO (ConnectId sb)
onTextPushed = connect_WORD_STRING__NONE "text-pushed" False
afterTextPushed = connect_WORD_STRING__NONE "text-pushed" True

