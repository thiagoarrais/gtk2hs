SignalName,
  ConnectAfter,
  ConnectId
  ) where

import Monad	(liftM)
import Foreign
import UTFCForeign	
import LocalData
import GObject	(objectRef, objectUnref)
{#import Hierarchy#}

{#context lib="gtk" prefix="gtk" #}


-- Specify if the handler is to run before (False) or after (True) the
-- default handler. (EXPORTED)

type ConnectAfter = Bool

type SignalName = String

data GObjectClass o => ConnectId o = ConnectID {#type gulong#} o

{#pointer GClosureNotify#}

foreign export dynamic mkDestructor :: IO () -> IO GClosureNotify

-- Here are the generators that turn a Haskell function into
-- a C function pointer. The fist Argument is always the widget,
-- the last one is the user g_pointer. Both are ignored.

