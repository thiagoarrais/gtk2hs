The tool in this directory are to semi-automatically generate binding modules
complete with haddock format documentation for all gtk modules. With a little
modification it should work for any other GObject-based api.

It works by extracting an api description from the C headder files and
extracting documentation from the docbook documentation produced by gtk-doc.

It is semi-automatic in the sense that the resulting binding module will need
some hand tweaking and it is not intended that this tool be used automatically
as part of the build process. It is mainly a time saving tool to relieve much
manual work involved in writing binding modules.

Some things that may need to be edited by hand:
  * Add your name at the top for new modules!
  * Some type signatures and marshaling code
      eg for possibly NULL Strings you would want to change to use Maybe String
      also it is not possible to automatically determine the element type of
      GLists so this will have to be determined manually.
  * Some functions have multiple out parameters which would be better done in
    Haskell by returning a tuple (this may be possible to do automatically but
    currently it is not).
  * Documentation. This is converted directly from the C documentation so there
    are usually things that you would want to change to make things make sense
    in Haskell. Code samples should be converted for example.

== For users: ==
At the moment you will need to edit the gen-all.sh script and adjust the
DOCBOOKDIR and HEADDERS variables to your system.

The HEADDERS variable should be a list of .h headder files to scan and generate
bindings for. It is probably better to use the installed headder files since
there are many private headder files in the gtk source directory.

The DOCBOOKDIR should be a directory containing docbook xml files coresponding
to the HEADDERS. The gen-all.sh script will look for an $FOO.xml file for every
$FOO.h file in HEADDERS. To generate the docbook format documentation you will
need to build (but not install) a version of gtk (preferably the same version
as the .h files came from). The gtk+-$VER/docs/reference/gtk/xml directory is
where the docbook files end up for gtk (there is also gdk and gtk-pixbuf).

The documentation is optional. If no docbook xml file is found the binding file
will still be generated but without any haddock documentation.

When this is done just run
./gen-all.sh
The final .chs binding files are put in the modules/ directory.
Intermediate api description files and documentation files are left under api/
and doc/.

== For hackers: ==
There are a few components to the system:

There are a couple perl scripts written by the mono/gtk-sharp authors. These
extract information from GObject-based .h files and generate xml descriptions.
To read these files you may want to build the gapi_format_xml tool also from
the gtk-sharp source tree. The xml files assume an object oreinted target
language (C#) but it does preserve all the information ok. These scripts are
GPL so should probably not be distributed in tarballs, just left in cvs.
Besides they're just gtk2hs hacker tools.

There is an XSLT program to extract per function documentation from docbook xml
files into a more convenient format. It is pretty specific to the format of
docbook document generated by gtk-doc (version 1.2). No doubt it will require
changes if gtk-doc changes.

The major component to the system is a Haskell program ApiGen.hs that reads in
the api xml file and the documentation xml file and spits out .chs binding
file(s) using the Template.chs file. The files are named the same as the object
they bind.

Some improvements that would be good:
 * Complete marshaling code for more types
 * Emit top level module documentation, including:
    - object heirarchy
 * Emit signal and property bindings with documentation
