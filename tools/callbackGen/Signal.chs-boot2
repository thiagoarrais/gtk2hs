SignalName,
  ConnectAfter,
  ConnectId,
  disconnect
  ) where

import Monad	(liftM)
import FFI
import Data.IORef
import GObject	(objectRef, objectUnref)
import GError   (failOnGError)
{#import Hierarchy#}

{#context lib="gtk" prefix="gtk" #}


-- Specify if the handler is to run before (False) or after (True) the
-- default handler.

type ConnectAfter = Bool

type SignalName = String

data GObjectClass o => ConnectId o = ConnectID {#type gulong#} o

{#pointer GClosureNotify#}

foreign import ccall "wrapper" mkDestructor :: IO () -> IO GClosureNotify

disconnect :: GObjectClass obj => ConnectId obj -> IO ()
disconnect (ConnectID handler obj) =
  withForeignPtr  ((unGObject.toGObject) obj) $ \objPtr ->
  {#call unsafe g_signal_handler_disconnect#} (castPtr objPtr) handler

-- Here are the generators that turn a Haskell function into
-- a C function pointer. The fist Argument is always the widget,
-- the last one is the user g_pointer. Both are ignored.

